displayPoly(poly2);

    PolyNode* sum = addPolynomials(poly1, poly2);
    printf("Polynomial Addition: ");
    displayPoly(sum);

    PolyNode* difference = subtractPolynomials(poly1, poly2);
    printf("Polynomial Subtraction: ");
    displayPoly(difference);

    PolyNode* product = multiplyPolynomials(poly1, poly2);
    printf("Polynomial Multiplication: ");
    displayPoly(product);

    return 0;
}

// Main function to demonstrate the tree traversals
int main() {
    // Creating a sample binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    // Performing Inorder Traversal
    printf("Inorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    // Performing Preorder Traversal
    printf("Preorder Traversal: ");
    preorderTraversal(root);
    printf("\n");

    // Performing Postorder Traversal
    printf("Postorder Traversal: ");
    postorderTraversal(root);
    printf("\n");

    return 0;
}


